lazyMint(
    uint256 _amount,
    string calldata _baseURIForTokens,
    bytes calldata _data
)
// Assume `_data` empty 
├── when caller not authorized
  │  └── it should revert ✅
  └── when caller is authorized
       └── when amount to lazy mint is 0
       │    └── it should revert ✅
       └── when amount to lazy mint is not 0
            └── it should save the batch of tokens starting at `nextTokenIdToLazyMint` ✅
            └── it should store batch id equal to the sum of `nextTokenIdToLazyMint` and `_amount` ✅
            └── it should map the new batch id to `_baseURIForTokens` ✅
            └── it should increase `nextTokenIdToLazyMint` by `_amount` ✅
            └── it should return the new `batchId`  ✅
            └── it should emit TokensLazyMinted event ✅

// Assume `_data` not empty 
├── when caller not authorized
  │  └── it should revert ✅
  └── when caller is authorized
       └── when amount to lazy mint is 0
       │    └── it should revert ✅
       └── when amount to lazy mint is not 0
            └── when data can't be decoded
            │    └── it should revert ✅
            └── when data can be decoded successfully
                    └── when decoded encryptedURI and provenanceHash are non-empty
                        └── it should set encrypted data for the new batch equal to _data ✅
                        └── it should save the batch of tokens starting at `nextTokenIdToLazyMint` ✅
                        └── it should store batch id equal to the sum of `nextTokenIdToLazyMint` and `_amount` ✅
                        └── it should map the new batch id to `_baseURIForTokens` ✅
                        └── it should increase `nextTokenIdToLazyMint` by `_amount` ✅
                        └── it should return the new `batchId` ✅
                        └── it should emit TokensLazyMinted event ✅

