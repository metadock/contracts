cancelInvoice.t.sol
├── when the invoice status IS Paid
│   └── it should revert with the {CannotCancelPaidInvoice} error
└── when the invoice status IS NOT Paid
    ├── when the invoice status IS Canceled
    │   └── it should revert with the {InvoiceAlreadyCanceled} error
    └── when the invoice status IS NOT Canceled
        ├── given the payment method is transfer
        │   ├── when the sender IS NOT the invoice recipient
        │   │   └── it should revert with the {InvoiceOwnerUnauthorized}
        │   └── when the sender IS the invoice recipient
        │        ├── it should mark the invoice as Canceled
        │        └── it should emit an {InvoiceCanceled} event
        ├── given the payment method is linear stream-based
        │   ├── given the invoice status is Pending
        │   │   ├── when the sender IS NOT the invoice recipient
        │   │   │   └── it should revert with the {InvoiceOwnerUnauthorized}
        │   │   └── when the sender IS the invoice recipient
        │   │       ├── it should mark the invoice as Canceled
        │   │       └── it should emit an {InvoiceCanceled} event
        │   └── given the invoice status is Ongoing
        │        ├── when the sender IS NOT the initial stream sender
        │        │   └── it should revert with the {OnlyInitialStreamSender} error 
        │        └── when the sender IS the initial stream sender 
        │            ├── it should mark the invoice as Canceled
        │            └── it should emit an {InvoiceCanceled} event
        └── given the payment method is tranched stream-based
            ├── given the invoice status is Pending
            │   ├── when the sender IS NOT the invoice recipient
            │   │   └── it should revert with the {InvoiceOwnerUnauthorized}
            │   └── when the sender IS the invoice recipient
            │       ├── it should mark the invoice as Canceled
            │       └── it should emit an {InvoiceCanceled} event
            └── given the invoice status is Ongoing
                ├── when the sender IS NOT the initial stream sender
                │   └──it should revert with the {OnlyInitialStreamSender} error 
                └── when the sender IS the initial stream sender 
                    ├── it should mark the invoice as Canceled
                    └── it should emit an {InvoiceCanceled} event
        
